{"version":3,"sources":["components/Header.js","utils/api.js","components/searchForm.js","components/table.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","axios","get","SearchForm","props","name","type","id","placeholder","onChange","handleInputChange","console","log","search","Table","scope","onClick","handleSort","src","alt","results","length","map","employee","index","key","picture","thumbnail","first","last","phone","email","moment","dob","date","format","sortToggle","newResults","Search","useState","originalArray","state","setState","useEffect","API","then","employees","data","event","target","value","filter","toLowerCase","includes","columnName","sort","a","b","localeCompare","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a46dbc75.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1> Employee Directory </h1>\r\n    </div>\r\n  );\r\n}\r\nexport default Header;\r\n","import axios from \"axios\";\r\nexport default {\r\n    getEmployee: function() {\r\n        return axios.get(\"https://randomuser.me/api/?results=200\");\r\n      }, \r\n}\r\n","import React from \"react\";\r\n\r\nexport default function SearchForm(props) {\r\n\r\n  return (\r\n    <div className=\"searchArea\">\r\n        <div className=\"input-group\"></div>\r\n        <input\r\n          name=\"search\"\r\n          type=\"search\"\r\n          className=\"form-control\"\r\n          id=\"searchInput\"\r\n          placeholder=\"Search\"\r\n          onChange={props.handleInputChange}\r\n        />\r\n        {console.log(props.search)}\r\n      </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\n\r\nexport default function Table(props) {\r\n  return (\r\n    <table className=\"table table-hover\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">Image</th>\r\n  <th scope=\"col\" onClick = {()=>{  props.handleSort(\"Name\")  }}>Name <img src=\"https://img.icons8.com/material-outlined/24/000000/filter-and-sort.png\" alt=\"Sort\"/></th>\r\n          <th scope=\"col\">Phone</th>\r\n          <th scope=\"col\">Email</th>\r\n          <th scope=\"col\">DOB</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {props.results.length > 0 ? (\r\n          props.results.map((employee, index) => {\r\n            return (\r\n              <tr key={index}>\r\n                <th scope=\"row\">\r\n                  <img src={employee.picture.thumbnail} alt = \"Employee\" />\r\n                </th>\r\n                <td>{employee.name.first + \" \" + employee.name.last}</td>\r\n                <td>{employee.phone}</td>\r\n                <td>{employee.email}</td>\r\n                <td>\r\n                  {moment(employee.dob.date, \"YYYY-MM-DD\").format(\"MM-DD-YYYY\")}\r\n                </td>\r\n              </tr>\r\n            );\r\n          })\r\n        ) : (\r\n          <tr>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n          </tr>\r\n        )}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport API from \"../utils/api\";\r\nimport SearchForm from \"./searchForm\";\r\nimport Table from \"./table\";\r\n\r\nlet sortToggle = true;\r\nlet newResults = \"\";\r\n\r\nexport function Search() {\r\n  const [state, setState] = useState({\r\n    results: [],\r\n    originalArray: [],\r\n    search: \"\",\r\n  });\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setState({ ...state, [name]: value });\r\n    console.log(state);\r\n\r\n    const newResults = state.originalArray.filter((employee) => {\r\n      return (\r\n        employee.name.first.toLowerCase().includes(value.toLowerCase()) ||\r\n        employee.name.last.toLowerCase().includes(value.toLowerCase()) ||\r\n        employee.phone.includes(value) ||\r\n        employee.email.includes(value)\r\n      );\r\n    });\r\n\r\n    setState({\r\n      ...state,\r\n      results: newResults,\r\n    });\r\n  };\r\n  const handleSort = (columnName) => {\r\n    switch (columnName) {\r\n      case \"Name\":\r\n        if (sortToggle === true){\r\n        newResults = state.results.sort((a, b) =>\r\n          a.name.first.localeCompare(b.name.first)\r\n        );\r\n      sortToggle = false;\r\n      }\r\n      else{\r\n        newResults = state.results.sort((a, b) =>\r\n        b.name.first.localeCompare(a.name.first)\r\n      );\r\n      sortToggle = true;\r\n      }\r\n        setState({\r\n          ...state,\r\n          results: newResults,\r\n        });\r\n        break;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    API.getEmployee().then((employees) => {\r\n      setState({\r\n        ...state,\r\n        results: employees.data.results,\r\n        originalArray: employees.data.results,\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <SearchForm handleInputChange={handleInputChange} search={state.search} />\r\n      <Table results={state.results} handleSort={handleSort} sortToggle = {sortToggle}/>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport { Search } from \"./components/Search\";\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <Search></Search>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}